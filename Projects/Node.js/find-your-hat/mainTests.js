// Generated by CodiumAI

describe('generateField', () => {

    // Generates a field with the correct height and width
    it('should generate a field with the correct height and width', () => {
      const height = 5;
      const width = 10;
      const percentOfHoles = 0;
      const field = new Field(generateField(height, width, percentOfHoles));
      expect(field.height).toBe(height);
      expect(field.width).toBe(width);
    });

    // Generates a field with a hat at the last possible location if percentOfHoles is 0
    it('should generate a field with a hat at the last possible location if percentOfHoles is 0', () => {
      const height = 5;
      const width = 10;
      const percentOfHoles = 0;
      const field = new Field(generateField(height, width, percentOfHoles));
      expect(field.fieldArray[height - 1][width - 1]).toBe(hat);
    });

    // Places the path character at the start of the field
    it('should place the path character at the start of the field', () => {
      const height = 5;
      const width = 10;
      const percentOfHoles = 0;
      const field = new Field(generateField(height, width, percentOfHoles));
      expect(field.fieldArray[0][0]).toBe(pathCharacter);
    });

    // Places the hat at a random location at least 80% down the path
    it('should place the hat at a random location at least 80% down the path', () => {
      const height = 10;
      const width = 10;
      const percentOfHoles = 0;
      const field = new Field(generateField(height, width, percentOfHoles));
      let hatPlaced = false;
      for (let i = Math.floor(height * 0.8); i < height; i++) {
        for (let j = 0; j < width; j++) {
          if (field.fieldArray[i][j] === hat) {
            hatPlaced = true;
            break;
          }
        }
        if (hatPlaced) {
          break;
        }
      }
      expect(hatPlaced).toBe(true);
    });

    // Places the correct number of holes randomly on the field
    it('should place the correct number of holes randomly on the field', () => {
      const height = 5;
      const width = 10;
      const percentOfHoles = 20;
      const field = new Field(generateField(height, width, percentOfHoles));
      let numOfHoles = 0;
      for (let i = 0; i < field.height; i++) {
        for (let j = 0; j < field.width; j++) {
          if (field.fieldArray[i][j] === hole) {
            numOfHoles++;
          }
        }
      }
      expect(numOfHoles).toBe(Math.floor(height * width * (percentOfHoles/100)));
    });

    // Generates a field with no holes if percentOfHoles is 0
    it('should generate a field with no holes if percentOfHoles is 0', () => {
      const height = 5;
      const width = 10;
      const percentOfHoles = 0;
      const field = new Field(generateField(height, width, percentOfHoles));
      expect(field.fieldArray.flat().includes(hole)).toBe(false);
    });
});
